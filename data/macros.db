{"_id":"M2E5N2Q2OTk4MjU4","name":"Wilderness-Encounters-(Day)","permission":{"default":0,"ZmU0MWYzODg1MmMy":3},"type":"chat","sort":0,"flags":{},"scope":"global","command":"/w gm &{template:npcaction} {{rname=Wilderness Encounters (Day)}} {{description= [[ 1t[Wilderness-Encounters-(Day)] ]] For more information, see ***[Triboar Trail](http://journal.roll20.net/handout/-MNySzmKF1Tc4SvnXC2A)***. }}","author":"ZmU0MWYzODg1MmMy","img":"worlds/lost-mine-of-phandelver/macros/roll20_macro.png","actorIds":[]}
{"_id":"QQrIiDZAwYyMM3Oe","name":"Attack","type":"script","author":"ZmU0MWYzODg1MmMy","img":"icons/svg/dice-target.svg","scope":"global","command":"function Attack(hit_type, isprof, isbonusact, hit_value, hit_bonus, dam_value, dam_bonus)\n{\n    var prof=0;\n    console.log(isprof);\n    if(isprof == \"on\")\n        prof = actor.data.data.prof;\n        \n    var hit_mod = 0;\n    if(hit_type ==\"melee\")\n        hit_mod=actor.data.data.abilities.str.mod;\n    else if(hit_type == \"range\")\n        hit_mod = actor.data.data.abilities.dex.mod;\n    else if(hit_type ==\"magic\")\n        hit_mod= actor.data.data.abilities.wis.mod;\n\n    var dam_mod=0;\n    if(isbonusact == \"off\")\n    {\n        if(hit_type ==\"melee\")\n            dam_mod=actor.data.data.abilities.str.mod;\n        else if(hit_type == \"range\")\n            dam_mod = actor.data.data.abilities.dex.mod;\n        else if(hit_type ==\"magic\")\n            dam_mod= actor.data.data.abilities.wis.mod;\n    }\n    \n    var hit_color = \"#000000\";\n    if (hit_roll == \"20\")\n    {\n        hit_color = \"#00aa05\";\n    }\n    else if(hit_roll == \"1\")\n    {\n        hit_color = \"#e50303\";\n    }\n    var hit_roll = new Roll(\"@roll+@prof+@mod+@bonus\",{roll: hit_value, prof: prof, mod: hit_mod, bonus: hit_bonus});\n    var damage_roll = new Roll(\"@roll+@mod+@bonus\",{roll: dam_value, mode: dam_mod, bonus: dam_bonus});\n    const targets = Array.from(game.user.targets);\n    if(targets != null)\n    {\n        hit_roll.evaluate({async:false});\n        damage_roll.evaluate({async:false});\n        console.log(targets.length);\n    \n        for(var i = 0 ; i< targets.length; ++i)\n        {\n            var target= targets[i].actor;\n            console.log(actor);\n            console.log(target);\n            var ac = target.data.data.attributes.ac.value;\n            var position = i+1;\n            if(hit_roll.total>ac)\n            {\n                ChatMessage.create({content: `Target ${position} Hit with <span style=\"color: ${hit_color}\">${hit_roll.result}</span><br/>${damage_roll.result} = ${damage_roll.total} damage inflicted`});\n            }\n            else\n            {\n                ChatMessage.create({content: `Target ${position} Not Hit with <span style=\"color: ${hit_color}\">${hit_roll.result}</span>`});\n            }\n        }\n    }\n    else\n    {\n        ChatMessage.create({content: `Please select 1 or more target`});\n    }\n}\n\nlet rollTypeTemplate = `\n<div>\n    <div class=\"form-group\">\n        <label>Choose attack type</label>\n        <select id=\"attackType\">\n            <option value=\"melee\">Melee Attack</option>\n            <option value=\"range\">Range Attack</option>\n            <option value=\"magic\">Magic Attack</option>\n        </select><br/><br/>\n        <label>Proficient</label>\n        <input type=\"checkbox\" id=\"isProficient\"/>\n        <label>Bonus Attack</label>\n        <input type=\"checkbox\" id=\"isBonusAct\"/><br/><br/>\n        <label>Hit Dice Roll</lable>\n        <input id=\"hit_roll\"/><br/><br/>\n        <label>Hit Additional Bonus</lable>\n        <input id =\"hit_bonus\"/><br/><br/>\n        <label>Damage Roll</lable>\n        <input id=\"dam_roll\"/><br/><br/>\n        <label>Damage Additional Bonus</lable>\n        <input id =\"dam_bonus\"/><br/><br/>\n    </div>\n</div>`;\n\nlet d = new Dialog({\n  title: `Attack Menu`,\n  content: rollTypeTemplate,\n  buttons: {\n    ok: {\n      label: `Attack`,\n      callback: (html) =>\n        {\n          let hit_type = html.find('[id=attackType]')[0].value;\n          let isprof = html.find('[id=isProficient]')[0].value;\n          let isbonusact = html.find('[id=isBonusAct]')[0].value;\n          let hit_roll = html.find('[id=hit_roll]')[0].value;\n          let hit_bonus = html.find('[id=hit_bonus]')[0].value;\n          let dam_roll = html.find('[id=dam_roll]')[0].value;\n          let dam_bonus = html.find('[id=dam_bonus')[0].value;\n          Attack(hit_type,isprof,isbonusact,hit_roll,hit_bonus,dam_roll,dam_bonus);\n        }\n    },\n    close: {\n      icon: \"<i class='fas fa-tick'></i>\",\n      label: `Close`\n    },\n  },\n  default: \"close\",\n  close: () => {}\n});\n\nd.render(true);","folder":null,"sort":0,"permission":{"default":0,"ZmU0MWYzODg1MmMy":3},"flags":{}}
{"_id":"QxEKaGsfv7XrSBPa","name":"Melee Attack","type":"script","author":"ZmU0MWYzODg1MmMy","img":"icons/svg/dice-target.svg","scope":"global","command":"const prof = actor.data.data.prof;\nconst mod = actor.data.data.abilities.str.mod;\nconst roll = \"+15\";\nconst bonus = \"+1\";\nvar hit_roll = new Roll(\"@roll+@prof+@mod\",{roll: roll, prof: prof, mod: mod});\nvar damage_roll = new Roll(\"@roll+@mod+@bonus\",{roll: roll, mode: mod, bonus: bonus});\nconst targets = Array.from(game.user.targets);\nif(targets != null)\n{\n    hit_roll.evaluate({async:false});\n    damage_roll.evaluate({async:false});\n    console.log(targets.length);\n\n    for(var i = 0 ; i< targets.length; ++i)\n    {\n        var target= targets[i].actor;\n        console.log(actor);\n        console.log(target);\n        var ac = target.data.data.attributes.ac.value;\n        var position = i+1;\n        if(hit_roll.total>ac)\n        {\n            ChatMessage.create({content: \"Target \"+position+\" Hit with \"+hit_roll.result+\"<br/>\"+damage_roll.total+\" damage inflicted\"});\n        }\n        else\n        {\n            ChatMessage.create({content: \"Target \"+i+\" Not Hit with \"+hit_roll.result});\n        }\n    }\n}\nelse\n{\n    ChatMessage.create({content: \"Please select 1 or more target\"});\n}","folder":null,"sort":0,"permission":{"default":3,"ZmU0MWYzODg1MmMy":3},"flags":{"advanced-macros":{"runAsGM":false}}}
{"_id":"ZGE4MGM5NWI1NjZk","name":"Wave-Echo-Cave-Wandering-Monsters","permission":{"default":0,"ZmU0MWYzODg1MmMy":3},"type":"chat","sort":20000,"flags":{},"scope":"global","command":"/w gm &{template:npcaction} {{rname=Wave Echo Cave Wandering Monsters}} {{description= [[ 1t[Wave-Echo-Cave-Wandering-Monsters] ]] For more information, see ***[Wandering Monsters](http://journal.roll20.net/handout/-MNySmt3aw9nBG-0D4An)***. }}","author":"ZmU0MWYzODg1MmMy","img":"worlds/lost-mine-of-phandelver/macros/roll20_macro.png","actorIds":[]}
{"_id":"ZjI3Yzg4ODY1NDA4","name":"Wilderness-Encounters-(Night)","permission":{"default":0,"ZmU0MWYzODg1MmMy":3},"type":"chat","sort":10000,"flags":{},"scope":"global","command":"/w gm &{template:npcaction} {{rname=Wilderness Encounters (Night)}} {{description= [[ 1t[Wilderness-Encounters-(Night)] ]] For more information, see ***[Triboar Trail](http://journal.roll20.net/handout/-MNySzmKF1Tc4SvnXC2A)***. }}","author":"ZmU0MWYzODg1MmMy","img":"worlds/lost-mine-of-phandelver/macros/roll20_macro.png","actorIds":[]}
{"name":"Mass Roll Check","type":"script","author":"ZmU0MWYzODg1MmMy","img":"icons/svg/dice-target.svg","scope":"global","command":"/*\n* Gets a list of selected tokens (or defaults to the user's character), provides a list of\n* skills, and then makes a roll for all the selected tokens with that skill. It then spits out\n* the poorly-formatted results to chat (or the GM if you uncomment the whisper line).\n*/\n\nlet targetActors = getTargetActors().filter(a => a != null);\nfunction checkForActors(){\n    if (!targetActors.length > 0)\n        throw new Error('You must designate at least one token as the roll target');\n};\ncheckForActors();\n\n// Choose roll type dialog\nlet rollTypeTemplate = `\n<div>\n    <div class=\"form-group\">\n        <label>Choose roll type</label>\n        <select id=\"selectedType\">\n            <option value=\"save\">Saving Throw</option>\n            <option value=\"ability\">Ability Check</option>\n            <option value=\"skill\">Skill Check</option>\n        </select>\n    </div>\n</div>`;\n\nlet chooseCheckType = new Dialog({\n    title: \"Choose check type\",\n    content: rollTypeTemplate,\n    buttons: {\n        ok: {\n            icon: '<i class=\"fas fa-check\"></i>',\n            label: \"OK\",\n            callback:  async (html) => {\n                let checkType = html.find(\"#selectedType\")[0].value;\n                selectedCheckDialog(checkType).render(true);\n            }\n        },\n        cancel: {\n            icon: '<i class=\"fas fa-times\"></i>',\n            label: 'Cancel'\n        }\n    },\n    default: \"cancel\"\n});\n\n// Choose ability mod dialog\nfunction selectedCheckDialog(checkType) {\n\n    let dialogTitle = getCheckDialogTitle(checkType);\n    let dialogContent = getCheckTemplate(checkType);\n\n    return new Dialog({\n        title: dialogTitle,\n        content: dialogContent,\n        buttons: {\n            ok: {\n                icon: '<i class=\"fas fa-check\"></i>',\n                label: \"OK\",\n                callback: async (html) => {\n                    let id = html.find(\"#selectedAbility\")[0].value;\n\n                    let messageContent = `<div><h2>${checkType.toUpperCase()} Roll</h2></div>`\n                    for (let a of targetActors) {\n                        let name = a.name;\n                        let mod = 0;               \n                        switch (checkType) {\n                            case \"save\":\n                                mod = a.data.data.abilities[id].save;\n                                messageContent += `${name}: <b>[[1d20+${mod}]]</b> (${game.dnd5e.config.abilities[id]} saving throw)<br>`;\n                                break;\n                            case \"ability\":\n                                mod = a.data.data.abilities[id].mod + a.data.data.abilities[id].checkBonus;\n                                messageContent += `${name}: <b>[[1d20+${mod}]]</b> (${game.dnd5e.config.abilities[id]} check)<br>`;\n                                break;\n                            case \"skill\":\n                                mod = a.data.data.skills[id].total;\n                                messageContent += `${name}: <b>[[1d20+${mod}]]</b> (${game.dnd5e.config.skills[id]} (${a.data.data.skills[id].ability}) check)<br>`;\n                                break;\n                            default:\n                                objects = game.dnd5e.config.skills;\n                                break;\n                        }\n                    }\n    \n                    let chatData = {\n                        user: game.user.id,\n                        speaker: game.user,\n                        content: messageContent,\n                        // Uncomment the following line if you want the results whispered to the GM.\n                        // whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\n                    };\n                    ChatMessage.create(chatData, {});\n                }\n            },\n            cancel: {\n                icon: '<i class=\"fas fa-times\"></i>',\n                label: 'Cancel'\n            }\n        },\n        default: \"cancel\"\n    });\n}\n\n// Gets list of selected tokens, or if no tokens are selected then the user's character.\nfunction getTargetActors() {\n    const character = game.user.character;\n    const controlled = canvas.tokens.controlled;\n    let actors = [];\n\n    if (controlled.length === 0) return [character] || null;\n\n    if (controlled.length > 0) {\n        let actors = [];\n        for (let i = 0; i < controlled.length; i++) {\n            actors.push(controlled[i].actor);\n    }\n\n    return actors;\n}\nelse throw new Error('You must designate at least one token as the roll target');\n}\n\n\n// Gets a template of abilities or skills, based on the type of check chosen.\nfunction getCheckTemplate(checkType) {\n    let objects = new Object();\n    \n    switch (checkType) {\n        case \"save\":\n        case \"ability\":\n            objects = game.dnd5e.config.abilities;\n            break;\n        case \"skill\":\n            objects = game.dnd5e.config.skills;\n            break;\n        default:\n            objects = game.dnd5e.config.skills;\n            break;\n    }\n\n    let template = `\n    <div>\n        <div class=\"form-group\">\n            <label>Choose check</label>\n            <select id=\"selectedAbility\">`\n    \n            for (let [checkId, check] of Object.entries(objects)) {\n                template += `<option value=\"${checkId}\">${check}</option>`;    \n            }            \n    \n    template += `</select>\n        </div>\n    </div>`;\n\n    return template;\n}\n\nfunction getCheckDialogTitle(checkType) {\n    switch (checkType) {\n        case \"save\":\n            return \"Saving Throw\"\n        case \"ability\":\n            return \"Ability Check\"\n        case \"skill\":\n            return \"Skill Check\"\n        default:\n            return \"Unknown Check\"\n    }\n}\n\nchooseCheckType.render(true);","folder":null,"sort":0,"permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"ZmU0MWYzODg1MmMy":3},"flags":{"core":{"sourceId":"Compendium.foundry_community_macros.community-macros-roll.sXxLpBqCRhCQeGLV"}},"_id":"boO3MSrsKQRi8VLz"}
{"_id":"QQrIiDZAwYyMM3Oe","name":"Attack","type":"script","author":"ZmU0MWYzODg1MmMy","img":"icons/svg/dice-target.svg","scope":"global","command":"function Attack(hit_type, isprof, isbonusact, hit_value, hit_bonus, dam_value, dam_bonus)\n{\n    var prof=0;\n    console.log(isprof);\n    if(isprof == \"on\")\n        prof = actor.data.data.prof;\n        \n    var hit_mod = 0;\n    if(hit_type ==\"melee\")\n        hit_mod=actor.data.data.abilities.str.mod;\n    else if(hit_type == \"range\")\n        hit_mod = actor.data.data.abilities.dex.mod;\n    else if(hit_type ==\"magic\")\n        hit_mod= actor.data.data.abilities.wis.mod;\n\n    var dam_mod=0;\n    if(isbonusact == \"off\")\n    {\n        if(hit_type ==\"melee\")\n            dam_mod=actor.data.data.abilities.str.mod;\n        else if(hit_type == \"range\")\n            dam_mod = actor.data.data.abilities.dex.mod;\n        else if(hit_type ==\"magic\")\n            dam_mod= actor.data.data.abilities.wis.mod;\n    }\n    \n    var hit_color = \"#000000\";\n    if (hit_roll == \"20\")\n    {\n        hit_color = \"#00aa05\";\n    }\n    else if(hit_roll == \"1\")\n    {\n        hit_color = \"#e50303\";\n    }\n    var hit_roll = new Roll(\"@roll+@prof+@mod+@bonus\",{roll: hit_value, prof: prof, mod: hit_mod, bonus: hit_bonus});\n    var damage_roll = new Roll(\"@roll+@mod+@bonus\",{roll: dam_value, mode: dam_mod, bonus: dam_bonus});\n    const targets = Array.from(game.user.targets);\n    if(targets != null)\n    {\n        hit_roll.evaluate({async:false});\n        damage_roll.evaluate({async:false});\n        console.log(targets.length);\n    \n        for(var i = 0 ; i< targets.length; ++i)\n        {\n            var target= targets[i].actor;\n            console.log(actor);\n            console.log(target);\n            var ac = target.data.data.attributes.ac.value;\n            var position = i+1;\n            if(hit_roll.total>ac)\n            {\n                ChatMessage.create({content: `Target ${position} Hit with <span style=\"color: ${hit_color}\">${hit_roll.result}</span><br/>${damage_roll.result} = ${damage_roll.total} damage inflicted`});\n            }\n            else\n            {\n                ChatMessage.create({content: `Target ${position} Not Hit with <span style=\"color: ${hit_color}\">${hit_roll.result}</span>`});\n            }\n        }\n    }\n    else\n    {\n        ChatMessage.create({content: `Please select 1 or more target`});\n    }\n}\n\nlet rollTypeTemplate = `\n<div>\n    <div class=\"form-group\">\n        <label>Choose attack type</label>\n        <select id=\"attackType\">\n            <option value=\"melee\">Melee Attack</option>\n            <option value=\"range\">Range Attack</option>\n            <option value=\"magic\">Magic Attack</option>\n        </select><br/><br/>\n        <label>Proficient</label>\n        <input type=\"checkbox\" id=\"isProficient\"/>\n        <label>Bonus Action</label>\n        <input type=\"checkbox\" id=\"isBonusAct\"/><br/><br/>\n        <label>Hit Dice Roll</lable>\n        <input id=\"hit_roll\"/>\n        <label>Hit Additional Bonus</lable>\n        <input id =\"hit_bonus\"/><br/><br/>\n        <label>Damage Roll</lable>\n        <input id=\"dam_roll\"/>\n        <label>Damage Additional Bonus</lable>\n        <input id =\"dam_bonus\"/><br/><br/>\n    </div>\n</div>`;\n\nlet d = new Dialog({\n  title: `Attack Menu`,\n  content: rollTypeTemplate,\n  buttons: {\n    ok: {\n      label: `Attack`,\n      callback: (html) =>\n        {\n          let hit_type = html.find('[id=attackType]')[0].value;\n          let isprof = html.find('[id=isProficient]')[0].value;\n          let isbonusact = html.find('[id=isBonusAct]')[0].value;\n          let hit_roll = html.find('[id=hit_roll]')[0].value;\n          let hit_bonus = html.find('[id=hit_bonus]')[0].value;\n          let dam_roll = html.find('[id=dam_roll]')[0].value;\n          let dam_bonus = html.find('[id=dam_bonus')[0].value;\n          Attack(hit_type,isprof,isbonusact,hit_roll,hit_bonus,dam_roll,dam_bonus);\n        }\n    },\n    close: {\n      icon: \"<i class='fas fa-tick'></i>\",\n      label: `Close`\n    },\n  },\n  default: \"close\",\n  close: () => {}\n});\n\nd.render(true);","folder":null,"sort":0,"permission":{"default":0,"ZmU0MWYzODg1MmMy":3},"flags":{}}
{"_id":"QQrIiDZAwYyMM3Oe","name":"Attack","type":"script","author":"ZmU0MWYzODg1MmMy","img":"icons/svg/dice-target.svg","scope":"global","command":"function Attack(hit_type, isprof, isbonusact, hit_value, hit_bonus, dam_value, dam_bonus)\n{\n    var prof=0;\n    console.log(isprof);\n    if(isprof == \"on\")\n        prof = actor.data.data.prof;\n        \n    var hit_mod = 0;\n    if(hit_type ==\"melee\")\n        hit_mod=actor.data.data.abilities.str.mod;\n    else if(hit_type == \"range\")\n        hit_mod = actor.data.data.abilities.dex.mod;\n    else if(hit_type ==\"magic\")\n        hit_mod= actor.data.data.abilities.wis.mod;\n\n    var dam_mod=0;\n    if(isbonusact == \"off\")\n    {\n        if(hit_type ==\"melee\")\n            dam_mod=actor.data.data.abilities.str.mod;\n        else if(hit_type == \"range\")\n            dam_mod = actor.data.data.abilities.dex.mod;\n        else if(hit_type ==\"magic\")\n            dam_mod= actor.data.data.abilities.wis.mod;\n    }\n    \n    var hit_color = \"#000000\";\n    if (hit_roll == \"20\")\n    {\n        hit_color = \"#00aa05\";\n    }\n    else if(hit_roll == \"1\")\n    {\n        hit_color = \"#e50303\";\n    }\n    var hit_roll = new Roll(\"@roll+@prof+@mod+@bonus\",{roll: hit_value, prof: prof, mod: hit_mod, bonus: hit_bonus});\n    var damage_roll = new Roll(\"@roll+@mod+@bonus\",{roll: dam_value, mode: dam_mod, bonus: dam_bonus});\n    const targets = Array.from(game.user.targets);\n    if(targets != null)\n    {\n        hit_roll.evaluate({async:false});\n        damage_roll.evaluate({async:false});\n        console.log(targets.length);\n    \n        for(var i = 0 ; i< targets.length; ++i)\n        {\n            var target= targets[i].actor;\n            console.log(actor);\n            console.log(target);\n            var ac = target.data.data.attributes.ac.value;\n            var position = i+1;\n            if(hit_roll.total>ac)\n            {\n                ChatMessage.create({content: `Target ${position} Hit with <span style=\"color: ${hit_color}\">${hit_roll.result}</span><br/>${damage_roll.result} = ${damage_roll.total} damage inflicted`});\n            }\n            else\n            {\n                ChatMessage.create({content: `Target ${position} Not Hit with <span style=\"color: ${hit_color}\">${hit_roll.result}</span>`});\n            }\n        }\n    }\n    else\n    {\n        ChatMessage.create({content: `Please select 1 or more target`});\n    }\n}\n\nlet rollTypeTemplate = `\n<div>\n    <div class=\"form-group\">\n        <label>Choose attack type</label>\n        <select id=\"attackType\">\n            <option value=\"melee\">Melee Attack</option>\n            <option value=\"range\">Range Attack</option>\n            <option value=\"magic\">Magic Attack</option>\n        </select><br/><br/>\n        <label>Proficient</label>\n        <input type=\"checkbox\" id=\"isProficient\"/>\n        <label>Bonus Action</label>\n        <input type=\"checkbox\" id=\"isBonusAct\"/><br/><br/>\n        <label>Hit Dice Roll</lable>\n        <input id=\"hit_roll\"/><br/>\n        <label>Hit Additional Bonus</lable>\n        <input id =\"hit_bonus\"/><br/><br/>\n        <label>Damage Roll</lable>\n        <input id=\"dam_roll\"/><br/>\n        <label>Damage Additional Bonus</lable>\n        <input id =\"dam_bonus\"/><br/><br/>\n    </div>\n</div>`;\n\nlet d = new Dialog({\n  title: `Attack Menu`,\n  content: rollTypeTemplate,\n  buttons: {\n    ok: {\n      label: `Attack`,\n      callback: (html) =>\n        {\n          let hit_type = html.find('[id=attackType]')[0].value;\n          let isprof = html.find('[id=isProficient]')[0].value;\n          let isbonusact = html.find('[id=isBonusAct]')[0].value;\n          let hit_roll = html.find('[id=hit_roll]')[0].value;\n          let hit_bonus = html.find('[id=hit_bonus]')[0].value;\n          let dam_roll = html.find('[id=dam_roll]')[0].value;\n          let dam_bonus = html.find('[id=dam_bonus')[0].value;\n          Attack(hit_type,isprof,isbonusact,hit_roll,hit_bonus,dam_roll,dam_bonus);\n        }\n    },\n    close: {\n      icon: \"<i class='fas fa-tick'></i>\",\n      label: `Close`\n    },\n  },\n  default: \"close\",\n  close: () => {}\n});\n\nd.render(true);","folder":null,"sort":0,"permission":{"default":0,"ZmU0MWYzODg1MmMy":3},"flags":{}}
{"_id":"QQrIiDZAwYyMM3Oe","name":"Attack","type":"script","author":"ZmU0MWYzODg1MmMy","img":"icons/svg/dice-target.svg","scope":"global","command":"function Attack(hit_type, isprof, isbonusact, hit_value, hit_bonus, dam_value, dam_bonus)\n{\n    var prof=0;\n    console.log(isprof);\n    if(isprof == \"on\")\n        prof = actor.data.data.prof;\n        \n    var hit_mod = 0;\n    if(hit_type ==\"melee\")\n        hit_mod=actor.data.data.abilities.str.mod;\n    else if(hit_type == \"range\")\n        hit_mod = actor.data.data.abilities.dex.mod;\n    else if(hit_type ==\"magic\")\n        hit_mod= actor.data.data.abilities.wis.mod;\n\n    var dam_mod=0;\n    if(isbonusact == \"off\")\n    {\n        if(hit_type ==\"melee\")\n            dam_mod=actor.data.data.abilities.str.mod;\n        else if(hit_type == \"range\")\n            dam_mod = actor.data.data.abilities.dex.mod;\n        else if(hit_type ==\"magic\")\n            dam_mod= actor.data.data.abilities.wis.mod;\n    }\n    \n    var hit_color = \"#000000\";\n    if (hit_roll == \"20\")\n    {\n        hit_color = \"#00aa05\";\n    }\n    else if(hit_roll == \"1\")\n    {\n        hit_color = \"#e50303\";\n    }\n    var hit_roll = new Roll(\"@roll+@prof+@mod+@bonus\",{roll: hit_value, prof: prof, mod: hit_mod, bonus: hit_bonus});\n    var damage_roll = new Roll(\"@roll+@mod+@bonus\",{roll: dam_value, mode: dam_mod, bonus: dam_bonus});\n    const targets = Array.from(game.user.targets);\n    if(targets != null)\n    {\n        hit_roll.evaluate({async:false});\n        damage_roll.evaluate({async:false});\n        console.log(targets.length);\n    \n        for(var i = 0 ; i< targets.length; ++i)\n        {\n            var target= targets[i].actor;\n            console.log(actor);\n            console.log(target);\n            var ac = target.data.data.attributes.ac.value;\n            var position = i+1;\n            if(hit_roll.total>ac)\n            {\n                ChatMessage.create({content: `Target ${position} Hit with <span style=\"color: ${hit_color}\">${hit_roll.result}</span><br/>${damage_roll.result} = ${damage_roll.total} damage inflicted`});\n            }\n            else\n            {\n                ChatMessage.create({content: `Target ${position} Not Hit with <span style=\"color: ${hit_color}\">${hit_roll.result}</span>`});\n            }\n        }\n    }\n    else\n    {\n        ChatMessage.create({content: `Please select 1 or more target`});\n    }\n}\n\nlet rollTypeTemplate = `\n<div>\n    <div class=\"form-group\">\n        <label>Choose attack type</label>\n        <select id=\"attackType\">\n            <option value=\"melee\">Melee Attack</option>\n            <option value=\"range\">Range Attack</option>\n            <option value=\"magic\">Magic Attack</option>\n        </select><br/><br/>\n        <label>Proficient</label>\n        <input type=\"checkbox\" id=\"isProficient\"/>\n        <label>Bonus Action</label>\n        <input type=\"checkbox\" id=\"isBonusAct\"/><br/><br/>\n        <label style=\"width: 100px\">Hit Dice Roll</lable>\n        <input id=\"hit_roll\"/><br/>\n        <label style=\"width: 100px\">Hit Additional Bonus</lable>\n        <input id =\"hit_bonus\"/><br/><br/>\n        <label style=\"width: 100px\">Damage Roll</lable>\n        <input id=\"dam_roll\"/><br/>\n        <label style=\"width: 100px\">Damage Additional Bonus</lable>\n        <input id =\"dam_bonus\"/><br/><br/>\n    </div>\n</div>`;\n\nlet d = new Dialog({\n  title: `Attack Menu`,\n  content: rollTypeTemplate,\n  buttons: {\n    ok: {\n      label: `Attack`,\n      callback: (html) =>\n        {\n          let hit_type = html.find('[id=attackType]')[0].value;\n          let isprof = html.find('[id=isProficient]')[0].value;\n          let isbonusact = html.find('[id=isBonusAct]')[0].value;\n          let hit_roll = html.find('[id=hit_roll]')[0].value;\n          let hit_bonus = html.find('[id=hit_bonus]')[0].value;\n          let dam_roll = html.find('[id=dam_roll]')[0].value;\n          let dam_bonus = html.find('[id=dam_bonus')[0].value;\n          Attack(hit_type,isprof,isbonusact,hit_roll,hit_bonus,dam_roll,dam_bonus);\n        }\n    },\n    close: {\n      icon: \"<i class='fas fa-tick'></i>\",\n      label: `Close`\n    },\n  },\n  default: \"close\",\n  close: () => {}\n});\n\nd.render(true);","folder":null,"sort":0,"permission":{"default":0,"ZmU0MWYzODg1MmMy":3},"flags":{}}
{"_id":"QQrIiDZAwYyMM3Oe","name":"Attack","type":"script","author":"ZmU0MWYzODg1MmMy","img":"icons/svg/dice-target.svg","scope":"global","command":"function Attack(hit_type, isprof, isbonusact, hit_value, hit_bonus, dam_value, dam_bonus)\n{\n    var prof=0;\n    console.log(isprof);\n    if(isprof == \"on\")\n        prof = actor.data.data.prof;\n        \n    var hit_mod = 0;\n    if(hit_type ==\"melee\")\n        hit_mod=actor.data.data.abilities.str.mod;\n    else if(hit_type == \"range\")\n        hit_mod = actor.data.data.abilities.dex.mod;\n    else if(hit_type ==\"magic\")\n        hit_mod= actor.data.data.abilities.wis.mod;\n\n    var dam_mod=0;\n    if(isbonusact == \"off\")\n    {\n        if(hit_type ==\"melee\")\n            dam_mod=actor.data.data.abilities.str.mod;\n        else if(hit_type == \"range\")\n            dam_mod = actor.data.data.abilities.dex.mod;\n        else if(hit_type ==\"magic\")\n            dam_mod= actor.data.data.abilities.wis.mod;\n    }\n    \n    var hit_color = \"#000000\";\n    if (hit_roll == \"20\")\n    {\n        hit_color = \"#00aa05\";\n    }\n    else if(hit_roll == \"1\")\n    {\n        hit_color = \"#e50303\";\n    }\n    var hit_roll = new Roll(\"@roll+@prof+@mod+@bonus\",{roll: hit_value, prof: prof, mod: hit_mod, bonus: hit_bonus});\n    var damage_roll = new Roll(\"@roll+@mod+@bonus\",{roll: dam_value, mode: dam_mod, bonus: dam_bonus});\n    const targets = Array.from(game.user.targets);\n    if(targets != null)\n    {\n        hit_roll.evaluate({async:false});\n        damage_roll.evaluate({async:false});\n        console.log(targets.length);\n    \n        for(var i = 0 ; i< targets.length; ++i)\n        {\n            var target= targets[i].actor;\n            console.log(actor);\n            console.log(target);\n            var ac = target.data.data.attributes.ac.value;\n            var position = i+1;\n            if(hit_roll.total>ac)\n            {\n                ChatMessage.create({content: `Target ${position} Hit with <span style=\"color: ${hit_color}\">${hit_roll.result}</span><br/>${damage_roll.result} = ${damage_roll.total} damage inflicted`});\n            }\n            else\n            {\n                ChatMessage.create({content: `Target ${position} Not Hit with <span style=\"color: ${hit_color}\">${hit_roll.result}</span>`});\n            }\n        }\n    }\n    else\n    {\n        ChatMessage.create({content: `Please select 1 or more target`});\n    }\n}\n\nlet rollTypeTemplate = `\n<div>\n    <div class=\"form-group\">\n        <label>Choose attack type</label>\n        <select id=\"attackType\">\n            <option value=\"melee\">Melee Attack</option>\n            <option value=\"range\">Range Attack</option>\n            <option value=\"magic\">Magic Attack</option>\n        </select><br/><br/>\n        <label>Proficient</label>\n        <input type=\"checkbox\" id=\"isProficient\"/>\n        <label>Bonus Action</label>\n        <input type=\"checkbox\" id=\"isBonusAct\"/><br/><br/>\n        <label style=\"display: block; width: 100px;\">Hit Dice Roll</lable>\n        <input id=\"hit_roll\"/><br/>\n        <label style=\"display: block; width: 100px;\">Hit Additional Bonus</lable>\n        <input id =\"hit_bonus\"/><br/><br/>\n        <label style=\"display: block; width: 100px;\">Damage Roll</lable>\n        <input id=\"dam_roll\"/><br/>\n        <label style=\"display: block; width: 100px;\">Damage Additional Bonus</lable>\n        <input id =\"dam_bonus\"/><br/><br/>\n    </div>\n</div>`;\n\nlet d = new Dialog({\n  title: `Attack Menu`,\n  content: rollTypeTemplate,\n  buttons: {\n    ok: {\n      label: `Attack`,\n      callback: (html) =>\n        {\n          let hit_type = html.find('[id=attackType]')[0].value;\n          let isprof = html.find('[id=isProficient]')[0].value;\n          let isbonusact = html.find('[id=isBonusAct]')[0].value;\n          let hit_roll = html.find('[id=hit_roll]')[0].value;\n          let hit_bonus = html.find('[id=hit_bonus]')[0].value;\n          let dam_roll = html.find('[id=dam_roll]')[0].value;\n          let dam_bonus = html.find('[id=dam_bonus')[0].value;\n          Attack(hit_type,isprof,isbonusact,hit_roll,hit_bonus,dam_roll,dam_bonus);\n        }\n    },\n    close: {\n      icon: \"<i class='fas fa-tick'></i>\",\n      label: `Close`\n    },\n  },\n  default: \"close\",\n  close: () => {}\n});\n\nd.render(true);","folder":null,"sort":0,"permission":{"default":0,"ZmU0MWYzODg1MmMy":3},"flags":{}}
{"_id":"QQrIiDZAwYyMM3Oe","name":"Attack","type":"script","author":"ZmU0MWYzODg1MmMy","img":"icons/svg/dice-target.svg","scope":"global","command":"function Attack(hit_type, isprof, isbonusact, hit_value, hit_bonus, dam_value, dam_bonus)\n{\n    var prof=0;\n    console.log(isprof);\n    if(isprof == \"on\")\n        prof = actor.data.data.prof;\n        \n    var hit_mod = 0;\n    if(hit_type ==\"melee\")\n        hit_mod=actor.data.data.abilities.str.mod;\n    else if(hit_type == \"range\")\n        hit_mod = actor.data.data.abilities.dex.mod;\n    else if(hit_type ==\"magic\")\n        hit_mod= actor.data.data.abilities.wis.mod;\n\n    var dam_mod=0;\n    if(isbonusact == \"off\")\n    {\n        if(hit_type ==\"melee\")\n            dam_mod=actor.data.data.abilities.str.mod;\n        else if(hit_type == \"range\")\n            dam_mod = actor.data.data.abilities.dex.mod;\n        else if(hit_type ==\"magic\")\n            dam_mod= actor.data.data.abilities.wis.mod;\n    }\n    \n    var hit_color = \"#000000\";\n    if (hit_roll == \"20\")\n    {\n        hit_color = \"#00aa05\";\n    }\n    else if(hit_roll == \"1\")\n    {\n        hit_color = \"#e50303\";\n    }\n    var hit_roll = new Roll(\"@roll+@prof+@mod+@bonus\",{roll: hit_value, prof: prof, mod: hit_mod, bonus: hit_bonus});\n    var damage_roll = new Roll(\"@roll+@mod+@bonus\",{roll: dam_value, mode: dam_mod, bonus: dam_bonus});\n    const targets = Array.from(game.user.targets);\n    if(targets != null)\n    {\n        hit_roll.evaluate({async:false});\n        damage_roll.evaluate({async:false});\n        console.log(targets.length);\n    \n        for(var i = 0 ; i< targets.length; ++i)\n        {\n            var target= targets[i].actor;\n            console.log(actor);\n            console.log(target);\n            var ac = target.data.data.attributes.ac.value;\n            var position = i+1;\n            if(hit_roll.total>ac)\n            {\n                ChatMessage.create({content: `Target ${position} Hit with <span style=\"color: ${hit_color}\">${hit_roll.result}</span><br/>${damage_roll.result} = ${damage_roll.total} damage inflicted`});\n            }\n            else\n            {\n                ChatMessage.create({content: `Target ${position} Not Hit with <span style=\"color: ${hit_color}\">${hit_roll.result}</span>`});\n            }\n        }\n    }\n    else\n    {\n        ChatMessage.create({content: `Please select 1 or more target`});\n    }\n}\n\nlet rollTypeTemplate = `\n<div>\n    <div class=\"form-group\">\n        <label>Choose attack type</label>\n        <select id=\"attackType\">\n            <option value=\"melee\">Melee Attack</option>\n            <option value=\"range\">Range Attack</option>\n            <option value=\"magic\">Magic Attack</option>\n        </select><br/><br/>\n        <label>Proficient</label>\n        <input type=\"checkbox\" id=\"isProficient\"/>\n        <label>Bonus Action</label>\n        <input type=\"checkbox\" id=\"isBonusAct\"/><br/><br/>\n        <label style=\"display: inline-block; width: 100px;\">Hit Dice Roll</lable>\n        <input id=\"hit_roll\"/><br/>\n        <label style=\"display: inline-block; width: 100px;\">Hit Additional Bonus</lable>\n        <input id =\"hit_bonus\"/><br/><br/>\n        <label style=\"display: inline-block; width: 100px;\">Damage Roll</lable>\n        <input id=\"dam_roll\"/><br/>\n        <label style=\"display: inline-block; width: 100px;\">Damage Additional Bonus</lable>\n        <input id =\"dam_bonus\"/><br/><br/>\n    </div>\n</div>`;\n\nlet d = new Dialog({\n  title: `Attack Menu`,\n  content: rollTypeTemplate,\n  buttons: {\n    ok: {\n      label: `Attack`,\n      callback: (html) =>\n        {\n          let hit_type = html.find('[id=attackType]')[0].value;\n          let isprof = html.find('[id=isProficient]')[0].value;\n          let isbonusact = html.find('[id=isBonusAct]')[0].value;\n          let hit_roll = html.find('[id=hit_roll]')[0].value;\n          let hit_bonus = html.find('[id=hit_bonus]')[0].value;\n          let dam_roll = html.find('[id=dam_roll]')[0].value;\n          let dam_bonus = html.find('[id=dam_bonus')[0].value;\n          Attack(hit_type,isprof,isbonusact,hit_roll,hit_bonus,dam_roll,dam_bonus);\n        }\n    },\n    close: {\n      icon: \"<i class='fas fa-tick'></i>\",\n      label: `Close`\n    },\n  },\n  default: \"close\",\n  close: () => {}\n});\n\nd.render(true);","folder":null,"sort":0,"permission":{"default":0,"ZmU0MWYzODg1MmMy":3},"flags":{}}
{"_id":"QQrIiDZAwYyMM3Oe","name":"Attack","type":"script","author":"ZmU0MWYzODg1MmMy","img":"icons/svg/dice-target.svg","scope":"global","command":"function Attack(hit_type, isprof, isbonusact, hit_value, hit_bonus, dam_value, dam_bonus)\n{\n    var prof=0;\n    console.log(isprof);\n    if(isprof == \"on\")\n        prof = actor.data.data.prof;\n        \n    var hit_mod = 0;\n    if(hit_type ==\"melee\")\n        hit_mod=actor.data.data.abilities.str.mod;\n    else if(hit_type == \"range\")\n        hit_mod = actor.data.data.abilities.dex.mod;\n    else if(hit_type ==\"magic\")\n        hit_mod= actor.data.data.abilities.wis.mod;\n\n    var dam_mod=0;\n    if(isbonusact == \"off\")\n    {\n        if(hit_type ==\"melee\")\n            dam_mod=actor.data.data.abilities.str.mod;\n        else if(hit_type == \"range\")\n            dam_mod = actor.data.data.abilities.dex.mod;\n        else if(hit_type ==\"magic\")\n            dam_mod= actor.data.data.abilities.wis.mod;\n    }\n    \n    var hit_color = \"#000000\";\n    if (hit_roll == \"20\")\n    {\n        hit_color = \"#00aa05\";\n    }\n    else if(hit_roll == \"1\")\n    {\n        hit_color = \"#e50303\";\n    }\n    var hit_roll = new Roll(\"@roll+@prof+@mod+@bonus\",{roll: hit_value, prof: prof, mod: hit_mod, bonus: hit_bonus});\n    var damage_roll = new Roll(\"@roll+@mod+@bonus\",{roll: dam_value, mode: dam_mod, bonus: dam_bonus});\n    const targets = Array.from(game.user.targets);\n    if(targets != null)\n    {\n        hit_roll.evaluate({async:false});\n        damage_roll.evaluate({async:false});\n        console.log(targets.length);\n    \n        for(var i = 0 ; i< targets.length; ++i)\n        {\n            var target= targets[i].actor;\n            console.log(actor);\n            console.log(target);\n            var ac = target.data.data.attributes.ac.value;\n            var position = i+1;\n            if(hit_roll.total>ac)\n            {\n                ChatMessage.create({content: `Target ${position} Hit with <span style=\"color: ${hit_color}\">${hit_roll.result}</span><br/>${damage_roll.result} = ${damage_roll.total} damage inflicted`});\n            }\n            else\n            {\n                ChatMessage.create({content: `Target ${position} Not Hit with <span style=\"color: ${hit_color}\">${hit_roll.result}</span>`});\n            }\n        }\n    }\n    else\n    {\n        ChatMessage.create({content: `Please select 1 or more target`});\n    }\n}\n\nlet rollTypeTemplate = `\n<div>\n    <div class=\"form-group\">\n        <label>Choose attack type</label>\n        <select id=\"attackType\">\n            <option value=\"melee\">Melee Attack</option>\n            <option value=\"range\">Range Attack</option>\n            <option value=\"magic\">Magic Attack</option>\n        </select><br/><br/>\n        <label>Proficient</label>\n        <input type=\"checkbox\" id=\"isProficient\"/>\n        <label>Bonus Action</label>\n        <input type=\"checkbox\" id=\"isBonusAct\"/><br/><br/>\n        <label style=\"display: inline-block; width: 100px;\">Hit Dice Roll</lable>\n        <input id=\"hit_roll\" type=\"text\"/><br/>\n        <label style=\"display: inline-block; width: 100px;\">Hit Additional Bonus</lable>\n        <input id =\"hit_bonus\" type=\"text\"/><br/><br/>\n        <label style=\"display: inline-block; width: 100px;\">Damage Roll</lable>\n        <input id=\"dam_roll\" type=\"text\"/><br/>\n        <label style=\"display: inline-block; width: 100px;\">Damage Additional Bonus</lable>\n        <input id =\"dam_bonus\" type=\"text\"/><br/><br/>\n    </div>\n</div>`;\n\nlet d = new Dialog({\n  title: `Attack Menu`,\n  content: rollTypeTemplate,\n  buttons: {\n    ok: {\n      label: `Attack`,\n      callback: (html) =>\n        {\n          let hit_type = html.find('[id=attackType]')[0].value;\n          let isprof = html.find('[id=isProficient]')[0].value;\n          let isbonusact = html.find('[id=isBonusAct]')[0].value;\n          let hit_roll = html.find('[id=hit_roll]')[0].value;\n          let hit_bonus = html.find('[id=hit_bonus]')[0].value;\n          let dam_roll = html.find('[id=dam_roll]')[0].value;\n          let dam_bonus = html.find('[id=dam_bonus')[0].value;\n          Attack(hit_type,isprof,isbonusact,hit_roll,hit_bonus,dam_roll,dam_bonus);\n        }\n    },\n    close: {\n      icon: \"<i class='fas fa-tick'></i>\",\n      label: `Close`\n    },\n  },\n  default: \"close\",\n  close: () => {}\n});\n\nd.render(true);","folder":null,"sort":0,"permission":{"default":0,"ZmU0MWYzODg1MmMy":3},"flags":{}}
{"_id":"QQrIiDZAwYyMM3Oe","name":"Attack","type":"script","author":"ZmU0MWYzODg1MmMy","img":"icons/svg/dice-target.svg","scope":"global","command":"function Attack(hit_type, isprof, isbonusact, hit_value, hit_bonus, dam_value, dam_bonus)\n{\n    var prof=0;\n    console.log(isprof);\n    if(isprof == \"on\")\n        prof = actor.data.data.prof;\n        \n    var hit_mod = 0;\n    if(hit_type ==\"melee\")\n        hit_mod=actor.data.data.abilities.str.mod;\n    else if(hit_type == \"range\")\n        hit_mod = actor.data.data.abilities.dex.mod;\n    else if(hit_type ==\"magic\")\n        hit_mod= actor.data.data.abilities.wis.mod;\n\n    var dam_mod=0;\n    if(isbonusact == \"off\")\n    {\n        if(hit_type ==\"melee\")\n            dam_mod=actor.data.data.abilities.str.mod;\n        else if(hit_type == \"range\")\n            dam_mod = actor.data.data.abilities.dex.mod;\n        else if(hit_type ==\"magic\")\n            dam_mod= actor.data.data.abilities.wis.mod;\n    }\n    \n    var hit_color = \"#000000\";\n    if (hit_roll == \"20\")\n    {\n        hit_color = \"#00aa05\";\n    }\n    else if(hit_roll == \"1\")\n    {\n        hit_color = \"#e50303\";\n    }\n    var hit_roll = new Roll(\"@roll+@prof+@mod+@bonus\",{roll: hit_value, prof: prof, mod: hit_mod, bonus: hit_bonus});\n    var damage_roll = new Roll(\"@roll+@mod+@bonus\",{roll: dam_value, mode: dam_mod, bonus: dam_bonus});\n    const targets = Array.from(game.user.targets);\n    if(targets != null)\n    {\n        hit_roll.evaluate({async:false});\n        damage_roll.evaluate({async:false});\n        console.log(targets.length);\n    \n        for(var i = 0 ; i< targets.length; ++i)\n        {\n            var target= targets[i].actor;\n            console.log(actor);\n            console.log(target);\n            var ac = target.data.data.attributes.ac.value;\n            var position = i+1;\n            if(hit_roll.total>ac)\n            {\n                ChatMessage.create({content: `Target ${position} Hit with <span style=\"color: ${hit_color}\">${hit_roll.result}</span><br/>${damage_roll.result} = ${damage_roll.total} damage inflicted`});\n            }\n            else\n            {\n                ChatMessage.create({content: `Target ${position} Not Hit with <span style=\"color: ${hit_color}\">${hit_roll.result}</span>`});\n            }\n        }\n    }\n    else\n    {\n        ChatMessage.create({content: `Please select 1 or more target`});\n    }\n}\n\nlet rollTypeTemplate = `\n<div>\n    <form>\n        <label>Choose attack type</label>\n        <select id=\"attackType\">\n            <option value=\"melee\">Melee Attack</option>\n            <option value=\"range\">Range Attack</option>\n            <option value=\"magic\">Magic Attack</option>\n        </select><br/><br/>\n        <label>Proficient</label>\n        <input type=\"checkbox\" id=\"isProficient\"/>\n        <label>Bonus Action</label>\n        <input type=\"checkbox\" id=\"isBonusAct\"/><br/><br/>\n        <label style=\"display: inline-block; width: 100px;\">Hit Dice Roll</lable>\n        <input id=\"hit_roll\" type=\"text\"/><br/>\n        <label style=\"display: inline-block; width: 100px;\">Hit Additional Bonus</lable>\n        <input id =\"hit_bonus\" type=\"text\"/><br/><br/>\n        <label style=\"display: inline-block; width: 100px;\">Damage Roll</lable>\n        <input id=\"dam_roll\" type=\"text\"/><br/>\n        <label style=\"display: inline-block; width: 100px;\">Damage Additional Bonus</lable>\n        <input id =\"dam_bonus\" type=\"text\"/><br/><br/>\n    </form>\n</div>`;\n\nlet d = new Dialog({\n  title: `Attack Menu`,\n  content: rollTypeTemplate,\n  buttons: {\n    ok: {\n      label: `Attack`,\n      callback: (html) =>\n        {\n          let hit_type = html.find('[id=attackType]')[0].value;\n          let isprof = html.find('[id=isProficient]')[0].value;\n          let isbonusact = html.find('[id=isBonusAct]')[0].value;\n          let hit_roll = html.find('[id=hit_roll]')[0].value;\n          let hit_bonus = html.find('[id=hit_bonus]')[0].value;\n          let dam_roll = html.find('[id=dam_roll]')[0].value;\n          let dam_bonus = html.find('[id=dam_bonus')[0].value;\n          Attack(hit_type,isprof,isbonusact,hit_roll,hit_bonus,dam_roll,dam_bonus);\n        }\n    },\n    close: {\n      icon: \"<i class='fas fa-tick'></i>\",\n      label: `Close`\n    },\n  },\n  default: \"close\",\n  close: () => {}\n});\n\nd.render(true);","folder":null,"sort":0,"permission":{"default":0,"ZmU0MWYzODg1MmMy":3},"flags":{}}
